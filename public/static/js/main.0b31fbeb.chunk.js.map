{"version":3,"sources":["logo.svg","config/config.js","api.js","reader/Column.js","reader/Parse.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","myConfig","apiUrl","api","genericCr","_callee","component","response","data","regenerator_default","a","wrap","_context","prev","next","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","abrupt","stop","Column","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","selectedCheckboxes","Set","selectOption","e","has","currentTarget","value","delete","add","setState","size","state","fields","checked","check","error","textButton","ids","forEach","box","indexOf","push","total","i","nombre","apellidos","telefonos","direcciones","sendApi","alert","success","d","Array","from","_this2","react_default","createElement","length","className","map","item","key","index","type","name","onChange","onClick","parse","bind","React","Component","Parse","handleForce","delimiterFunction","options","delimiter","delimiters","react_csv_reader_default","cssClass","label","onFileLoaded","parserOptions","Column_Column","App","Parse_Parse","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b31fbeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var env;\r\nif (process.env.NODE_ENV === 'development') {\r\n    env = { apiUrl: 'http://localhost:3001'}\r\n}else{\r\n    env = { apiUrl: ''}\r\n}\r\nexport const myConfig=env;","import 'isomorphic-fetch'\r\nimport { myConfig } from './config/config.js';\r\n\r\nexport default {\r\n  genericCr,\r\n}\r\nasync function genericCr(component) {\r\n  const response = await fetch(myConfig.apiUrl + '/crmRegister/save',{method: 'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify(component)});\r\n  var data = await response.json();\r\n  return data;\r\n}\r\n","import React  from 'react'\r\nimport api from '../api'\r\n\r\nexport default class Column extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        fields:[\r\n            { checked: false,value:'Nombres' },\r\n            { checked: false,value:'Apellidos' },\r\n            { checked: false,value:'TelÃ©fonos' },\r\n            { checked: false,value:'Direcciones' }\r\n        ],\r\n        check:[],\r\n        size:0,\r\n        error:false,\r\n        textButton:'Enviar'\r\n    };\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    this.selectedCheckboxes = new Set();\r\n  }\r\n\r\n  selectOption = e => {\r\n    if (this.selectedCheckboxes.has(e.currentTarget.value)) {\r\n        this.selectedCheckboxes.delete(e.currentTarget.value);\r\n      } else {\r\n        this.selectedCheckboxes.add(e.currentTarget.value);\r\n      }\r\n    this.setState({\r\n        size:this.selectedCheckboxes.size\r\n    });\r\n  }\r\n\r\n  parse() {\r\n    this.setState({\r\n      textButton:'Enviando....'\r\n  });\r\n      var data = this.props.data[0]\r\n      var ids=[];\r\n      this.selectedCheckboxes.forEach(box => {\r\n          if(data.indexOf(box)!==-1){\r\n            ids.push(data.indexOf(box))\r\n          }\r\n      });\r\n      var total=[];\r\n      var i = 0\r\n      for(i in this.props.data){\r\n        total.push({\r\n            nombre:this.props.data[i][ids[0]],\r\n            apellidos:this.props.data[i][ids[1]],\r\n            telefonos:this.props.data[i][ids[2]],\r\n            direcciones:this.props.data[i][ids[3]]\r\n        })\r\n      }\r\n      this.sendApi(total)\r\n  }\r\n\r\n  async sendApi(total){\r\n    try{\r\n      const response =  await api.genericCr(total,'POST');\r\n      alert(JSON.stringify(response))\r\n      if(response && response.success===false){\r\n        this.setState({\r\n            error:true\r\n        });\r\n      }else{\r\n        this.setState({\r\n          error:false\r\n      });\r\n      }\r\n    }catch(e){\r\n      alert('error al enviar')\r\n    }\r\n    this.setState({\r\n      textButton:'Enviar'\r\n  });\r\n  }\r\n\r\n  show(d){\r\n    var array = Array.from(this.selectedCheckboxes);\r\n    var i = array.indexOf(d);     \r\n    return [this.selectedCheckboxes.has(d),i]\r\n  }\r\n\r\n  \r\n  render() {\r\n    return <div >\r\n        { this.props.data[0] && this.props.data[0].length>0 &&  \r\n            <div>   \r\n                <h3>Paso 3: seleccione los campos a subir </h3>\r\n                <div className=\"container\">\r\n                    <p>las Columnas deben ser {this.state.fields.map((item,i) => <span key={i}>{item.value},</span>)} </p>\r\n                    <div>\r\n                        {this.props.data[0].map((d,index) => {\r\n                        return (\r\n                            <div key={index}>\r\n                                <input type=\"checkbox\" name=\"fields\" value={d} onChange={this.selectOption}></input>{d} \r\n          \r\n                                 <br/>\r\n                            </div>\r\n                        )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                {this.props.data[0].length<3 ||  this.selectedCheckboxes.size!==4 &&\r\n                    <div className=\"alert alert-warning\">\r\n                        <strong>Advertencia!</strong> para completar el cargue de la informacion el archivo que suba debe contener los parametros de Nombres , Apellidos , TelÃ©fonos , Direcciones.\r\n                    </div>\r\n                }\r\n                {this.state.error &&\r\n                    <div className=\"alert alert-danger\">\r\n                        <strong>Error!</strong> Error al cargar su informaciÃ³n\r\n                    </div>\r\n                }\r\n                \r\n                <br/>\r\n                <div>\r\n                    <button className={\"btn btn-primary\" + (this.props.data[0].length>3 && this.selectedCheckboxes.size===4 ? '' : ' disabled hide')} onClick={this.parse.bind(this)}>{this.state.textButton}</button>\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n            </div>\r\n        }\r\n    </div>\r\n  }\r\n\r\n}","import React  from 'react'\r\nimport CSVReader from 'react-csv-reader'\r\nimport Column  from './Column.js'\r\n\r\nexport default class Parse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data:[\r\n          []\r\n      ],\r\n      options:{delimiter:\";\"},\r\n      delimiters:[';',',','.','%']\r\n    };\r\n  }\r\n  \r\n  handleForce = data => {\r\n    this.setState({data: data});\r\n  }\r\n\r\n  delimiterFunction = e => {\r\n    this.setState({\r\n        options:{delimiter: e.currentTarget.value}\r\n      });\r\n  }\r\n  \r\n  render() {\r\n    return <div >\r\n      <hr/>\r\n        <h3>Paso 1: ingrese el delimitador</h3>\r\n        <p>El delimitador puede ser ; , . % o una palabra clave</p>\r\n        <div>Delimitador:   \r\n            <div>\r\n                <input type=\"text\" name=\"delimiter\" value={this.state.options.delimiter} onChange={this.delimiterFunction} ></input><br/>\r\n            </div>\r\n        </div>\r\n        <hr/>\r\n        <h3>Paso 2: Seleccione el arciho csv</h3>\r\n        <div className=\"container\">\r\n            <CSVReader\r\n            cssClass=\"react-csv-input\"\r\n            label=\"Select CSV with secret Death Star statistics\"\r\n            onFileLoaded={this.handleForce}\r\n            parserOptions={this.state.options}\r\n            />\r\n        </div>\r\n        <hr/>\r\n        <Column data={this.state.data}/>\r\n    </div>\r\n  }\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Parse from './reader/Parse.js';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\" shadow\">\n        <div className=\" text-center\">\n          <div className=\"title\">Cargue masivo</div>\n          <br/>  \n        </div>\n      </div>\n      <br/>\n      \n      <div className=\"container\">\n      <p>A continuaciÃ³n encontrarÃ¡ un modulo para proceso de cargue\nde datos a su CRM para empezar a gestionar campaÃ±as de clientes. <br/> Seleccione un archivo csv y seleccione el delimitador que aplique a su caso</p>\n        <Parse />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}